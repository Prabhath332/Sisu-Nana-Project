// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_project.Data;

namespace web_project.Migrations
{
    [DbContext(typeof(web_projectContext))]
    [Migration("20210910191020_jjzzzzzzccbb")]
    partial class jjzzzzzzccbb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "Officer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "72e3e2bd-b94a-4996-b684-07b9d88f9841",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcad5be6-b165-447b-b532-96bd3493a8f7",
                            Email = "ruchikamperera@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ruchikamperera@outlook.com",
                            NormalizedUserName = "Admin",
                            PasswordHash = "AQAAAAEAACcQAAAAENEeTwm6Ze9jgsDOfJE+Er4iA1NDccfR7KNO8x51qMqa9CoQbBMB7Au8nWzrpuTptw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9346a5f8-df6e-465e-8b21-0ac16f442c40",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "11e3e2bd-b94a-4996-b684-07b9d88f9841",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca57cd12-1ffa-4972-b218-137cfba191e4",
                            Email = "senath@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ruchikamperera@outlook.com",
                            NormalizedUserName = "Senath_Admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEEVWkj4e0Sw80wVViZH4bPZYiHZcuKlevUZQDZ3006TYgaTu3VXGuvMxSlTQkTxK9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da4c0d22-8f9d-44f4-b3c9-89b61633d405",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "11e3e2cd-b94a-4996-b684-17bbd88f9861",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e96d8a0-3158-4bc9-95ef-d29961179b9d",
                            Email = "Nadeesha@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Nadeesha@outlook.com",
                            NormalizedUserName = "Nadeesha",
                            PasswordHash = "AQAAAAEAACcQAAAAENmXJYCwpsH1iC0E1/BM0T8ebPVdNCYb4po/NBh5X7swFc86HI2iN+1gvNkQEwnDpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b0c9bcd-7df4-4943-b055-ae4a2ea7dc00",
                            TwoFactorEnabled = false,
                            UserName = "Nadeesha"
                        },
                        new
                        {
                            Id = "19e3e2cc-b94a-4996-b684-17bbd78f9861",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ff1ba47-6aa2-492f-afc9-4eb19a020d4a",
                            Email = "Mekala@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Mekala@outlook.com",
                            NormalizedUserName = "Mekala",
                            PasswordHash = "AQAAAAEAACcQAAAAEAWlHSKXJlHzsYADHKmSPm5sOHRZjPqzfgVtCWl2UCnZuQEt2ppIDBIrUDM6TfRYVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4744eac6-7892-4497-a4c3-6501416d0be0",
                            TwoFactorEnabled = false,
                            UserName = "Mekala"
                        },
                        new
                        {
                            Id = "14e3e2dc-b94a-4996-l685-17bbz78f98x1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "288e9b9a-17d1-4b31-9504-1484afe04039",
                            Email = "Dinali@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Dinali@outlook.com",
                            NormalizedUserName = "Dinali",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdSEWe4oG+XSEGz4rgKcYmFOTkx2xVPmL/UAdCLrE3QTi8FV2z60oZJfVxa9iVfjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f12576c-05ff-4112-bed3-af768c29aafb",
                            TwoFactorEnabled = false,
                            UserName = "Dinali"
                        },
                        new
                        {
                            Id = "19ede2cc-b94a-4996-b684-17b5d78f986c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbac75ab-fb09-42aa-aa94-920631ccc4f0",
                            Email = "MADUKA@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MADUKA@outlook.com",
                            NormalizedUserName = "MADUKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFigsC7fdusGCYtNDyIFQmuqrHNz5is82BVdsM1NQ/sdwyGn59ueg/Y95gNmd++9Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b966462b-1a02-4399-8422-5e72e0f5ae0d",
                            TwoFactorEnabled = false,
                            UserName = "MADUKA"
                        },
                        new
                        {
                            Id = "19e3e2cc-b94a-1196-b684-17bbd78f9861",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1a57f38-55ac-40ea-a0be-e93f5c9929ba",
                            Email = "Kosala@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Kosala@outlook.com",
                            NormalizedUserName = "Kosala",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLH3eDjVi+NxqRauKX5M6Ho/VK5StRPaDcsVY9HEBSDoayyfkDpcks9YFJNrC1Bxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "810556b6-b5f3-43d6-af0a-fb876e128232",
                            TwoFactorEnabled = false,
                            UserName = "Kosala"
                        },
                        new
                        {
                            Id = "99ede2cc-b94a-4996-b684-17b5d78f986c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13b1ca3f-8874-4486-9905-4c49552080e9",
                            Email = "Gamage@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Gamage@outlook.com",
                            NormalizedUserName = "Gamage",
                            PasswordHash = "AQAAAAEAACcQAAAAEA52rs0lMPihSWhknzOWHomHldhFdIKZ4SxnI8vyYTqzmhXfCgnLS2alOWheK36qgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa0a54d0-5ac4-4c09-86ae-f5b7d3c4b5ac",
                            TwoFactorEnabled = false,
                            UserName = "Gamage"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "72e3e2bd-b94a-4996-b684-07b9d88f9841",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("web_project.Models.Allowance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllowanceTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Allowance");
                });

            modelBuilder.Entity("web_project.Models.AllowanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AllowanceType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "EXTRA DUTY ALLOWANCE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TRAVELING ALLOWANCE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "FUEL ALLOWANCE"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OTHER ALLOWANCE"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ARMS ALLOWANCE"
                        },
                        new
                        {
                            Id = 6,
                            Name = "EXTRA DUTY ALLOWANCE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "OVER TIME"
                        },
                        new
                        {
                            Id = 8,
                            Name = "HOSTEL INCHARGE"
                        },
                        new
                        {
                            Id = 9,
                            Name = "BIKE MAINTAIN ALLOWANCE"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MEAL ALLOWANCE"
                        },
                        new
                        {
                            Id = 11,
                            Name = "BONUS"
                        });
                });

            modelBuilder.Entity("web_project.Models.BasicSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Increment")
                        .HasColumnType("int");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("BasicSalary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 10000,
                            Increment = 100,
                            RankId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10000,
                            Increment = 100,
                            RankId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 10000,
                            Increment = 100,
                            RankId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 10620,
                            Increment = 150,
                            RankId = 4
                        },
                        new
                        {
                            Id = 5,
                            Amount = 10620,
                            Increment = 150,
                            RankId = 5
                        });
                });

            modelBuilder.Entity("web_project.Models.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeductionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Premium")
                        .HasColumnType("double");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DeductionTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Deduction");
                });

            modelBuilder.Entity("web_project.Models.DeductionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeductionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DeductionTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("DeductionHistory");
                });

            modelBuilder.Entity("web_project.Models.DeductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsMonthlyDeducting")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DeductionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMonthlyDeducting = false,
                            Name = "Medical Checkup Charges"
                        },
                        new
                        {
                            Id = 2,
                            IsMonthlyDeducting = false,
                            Name = "Meal Deductions"
                        },
                        new
                        {
                            Id = 3,
                            IsMonthlyDeducting = false,
                            Name = "Special Deductions"
                        },
                        new
                        {
                            Id = 4,
                            IsMonthlyDeducting = false,
                            Name = "Mobile Phone Bill Deductions"
                        },
                        new
                        {
                            Id = 5,
                            IsMonthlyDeducting = false,
                            Name = "ID Cost"
                        },
                        new
                        {
                            Id = 6,
                            IsMonthlyDeducting = false,
                            Name = "Loan"
                        },
                        new
                        {
                            Id = 7,
                            IsMonthlyDeducting = false,
                            Name = "Other Deductions"
                        },
                        new
                        {
                            Id = 8,
                            IsMonthlyDeducting = true,
                            Name = "Uniform Deductions"
                        },
                        new
                        {
                            Id = 9,
                            IsMonthlyDeducting = true,
                            Name = "Sport Uniform Deductions"
                        },
                        new
                        {
                            Id = 10,
                            IsMonthlyDeducting = true,
                            Name = "Suwasampatha Insurance"
                        },
                        new
                        {
                            Id = 11,
                            IsMonthlyDeducting = true,
                            Name = "Personal Accident Insurance"
                        },
                        new
                        {
                            Id = 12,
                            IsMonthlyDeducting = false,
                            Name = "Donation"
                        },
                        new
                        {
                            Id = 13,
                            IsMonthlyDeducting = true,
                            Name = "Fine and Penalty"
                        },
                        new
                        {
                            Id = 14,
                            IsMonthlyDeducting = false,
                            Name = "Festival Advance"
                        },
                        new
                        {
                            Id = 15,
                            IsMonthlyDeducting = true,
                            Name = "Fixed Deductions"
                        });
                });

            modelBuilder.Entity("web_project.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("web_project.Models.EmployeeClearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ClearanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("EmployeeClearance");
                });

            modelBuilder.Entity("web_project.Models.EnterAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DayShift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("NightShift")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("EnterAttendance");
                });

            modelBuilder.Entity("web_project.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("web_project.Models.FestivalAdvance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmpNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Premium")
                        .HasColumnType("double");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("FestivalAdvance");
                });

            modelBuilder.Entity("web_project.Models.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AviationAllowance")
                        .HasColumnType("double");

                    b.Property<double>("BudgetAllowance")
                        .HasColumnType("double");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("CostOfLiving")
                        .HasColumnType("double");

                    b.Property<string>("EPFDepartmentEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayBankEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("RationAllowance")
                        .HasColumnType("double");

                    b.Property<double>("RiskAllowance")
                        .HasColumnType("double");

                    b.Property<double>("SpecialTransportAllowance")
                        .HasColumnType("double");

                    b.Property<double>("WesternAllowance")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("GeneralSetting");
                });

            modelBuilder.Entity("web_project.Models.Gratuity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("BankDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("ServiceDuration")
                        .HasColumnType("double");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Gratuity");
                });

            modelBuilder.Entity("web_project.Models.InsuranceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Installment")
                        .HasColumnType("double");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PolicyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PolicyNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Premium")
                        .HasColumnType("double");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("InsuranceDetails");
                });

            modelBuilder.Entity("web_project.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocationNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sector")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("web_project.Models.MonthEnd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateInFull")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Month")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MonthEnd");
                });

            modelBuilder.Entity("web_project.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "JSO"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LSO"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SSO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OIC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CSO"
                        });
                });

            modelBuilder.Entity("web_project.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RankId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("web_project.Models.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cols")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ReportType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cols = "Emp No,Name,Account No,Advance Amount",
                            Name = "Advance_All"
                        },
                        new
                        {
                            Id = 2,
                            Cols = "Emp No,Name,Cash Amount",
                            Name = "Advance_Cash"
                        },
                        new
                        {
                            Id = 3,
                            Cols = "Emp No,Name,Account No,Bank Amount",
                            Name = "Advance_Bank"
                        },
                        new
                        {
                            Id = 4,
                            Cols = "Emp No,Name,Account No,Loan Amount",
                            Name = "Loan_All"
                        },
                        new
                        {
                            Id = 5,
                            Cols = "Emp No,Name,Loan Cash Amount",
                            Name = "Loan_Cash"
                        },
                        new
                        {
                            Id = 6,
                            Cols = "Emp No,Name,Account No,Loan Bank Amount",
                            Name = "Loan_Bank"
                        },
                        new
                        {
                            Id = 7,
                            Cols = "No,Emp No,Name,Rank,Location,Shifts,Gross,Loan,Balance",
                            Name = "Loan Payment"
                        },
                        new
                        {
                            Id = 8,
                            Cols = "EMP.NO.,SURNAME & INITIALS,LOC. NO.,LOC. NAME,ADDRESS,RANK,BRANCH,A/C NO.,EPF NO.,NIC NO.,Join Date",
                            Name = "All Employee Details"
                        },
                        new
                        {
                            Id = 9,
                            Cols = "Emp No,Name,Rank,DOJ,L/D Worked DOR,Active,Cleared",
                            Name = "Employee Clearance"
                        },
                        new
                        {
                            Id = 10,
                            Cols = "Emp No,Name,Location,Shifts,Date,",
                            Name = "Shift Wise"
                        },
                        new
                        {
                            Id = 11,
                            Cols = "Emp.No.,Name,Rank,Budget,Cost of Liv.,Dty. Allo.,O.T. Amt.,Uni. Upkeep,Risk Allo.,Ration Allo.,Budget Allo. 2015,Extra Duty Allo.,Sp. Allo. Western,Aviation Allo.,Travel All. +Festiva,Meal Allo.,Sp. Trans. Allo.,Hostel Fuel Other,Arr Refund,Arms.SS,Bike Allo.,Total Earn.,Tot Shi,OT,Incentive Allowance,Incentive",
                            Name = "Total Earning"
                        },
                        new
                        {
                            Id = 12,
                            Cols = "Emp No,Name,Rank,EPF No.,EPF,Basic Sal.,Death Do.& Welfar,Death Reco.,Uniform,Sport,Co-Operative.,Supportline Ins.,Twenty Forty Ins.,Peer.Acci.Ceylinco,Loan Reco.,Medi Check,Salary Adv.,Fine & Pen.,Fes.Adv.,Don. Reco.,Meal Deduc,ID Cost,Spect Ded,Tot.Ded.,Net Salary",
                            Name = "Total Deductions"
                        },
                        new
                        {
                            Id = 13,
                            Cols = "Location Number,Location Name,Employee Number,Name,Rank,Total Shifts,Total OT Hours,Duty Allowance,Basic Salary,Budget Allowance,Budget Allowance ,Hostel In charge Allowance,Risk Allowance,Aviation Allowance,Arrears and Refund,Festival Advance,Travelling Allowance,Fuel Allowance,ARMS Allowance,Extra Duty Allowance,Extra OT Allowance,Bike Maintenance,Meal Allowance,Bonus,Uniform ,Upkeep Makeup,Uniform Upkeeping,Ration Allowance,Western Allowance,Overtime,Transport Allowance,Performance Allowance,Incentive,Incentive Allowance,Other Earnings,Total Earnings,EPF 8%,No pay,Bank Charges,Death Donation,Medical Checkup,Uniform Deduction,Sport Uniform Deduction,Loan Recovery,Salary Advance,Meal Deductions,Insurance Per. Acc. Co-Operative,insurance Support line,insurance 24x7,ID ,Cost,Special Deduction II,Fine and Penalty,Mobile Phone Deduction,Festival Advance,Welfare Deduction,Stamp Duty,Other Deductions,EPF Salary,Total Deductions,Net Salary,Bank Code,Branch Code,Account Number",
                            Name = "Earning and Deduction"
                        },
                        new
                        {
                            Id = 14,
                            Cols = "Emp No,Name,NIC No.,A/C. No.,Salary Amt",
                            Name = "Bank Payment"
                        },
                        new
                        {
                            Id = 15,
                            Cols = "Emp. No.,Name,Rank,Tot.Ear.,Tot.Ded.,Salary Amt.",
                            Name = "Cash Payment"
                        },
                        new
                        {
                            Id = 16,
                            Cols = "Emp. No.,Name,Account No.,Rank,Tot.Shifts,Tot.Ear.,Total Ded.,Salary Amount",
                            Name = "Late Payment"
                        },
                        new
                        {
                            Id = 17,
                            Cols = "Emp No,Name,Rank,Amount",
                            Name = "Death Donation Deductions"
                        },
                        new
                        {
                            Id = 18,
                            Cols = "Emp. No.,Name,Rank,M.C. Charges",
                            Name = "Medical Checkup Deductions"
                        },
                        new
                        {
                            Id = 19,
                            Cols = "Emp. No.,Name,Rank,Uniform Deduction",
                            Name = "Uniform Deductions"
                        },
                        new
                        {
                            Id = 20,
                            Cols = "Emp. No.,Name,Rank,Sport Uniform",
                            Name = "Sport Uniform Deductions"
                        },
                        new
                        {
                            Id = 21,
                            Cols = "Emp. No.,Name,Rank,Loan Recovery",
                            Name = "Loan Recovery Deductions"
                        },
                        new
                        {
                            Id = 22,
                            Cols = "Emp. No.,Name,Rank,Salary Advance",
                            Name = "Salary Advance Deductions"
                        },
                        new
                        {
                            Id = 23,
                            Cols = "Emp. No.,Name,Rank,Meal Deduction",
                            Name = "Meal Deductions"
                        },
                        new
                        {
                            Id = 24,
                            Cols = "Emp. No.,Name,Rank,Amount",
                            Name = "Insurance Deductions"
                        },
                        new
                        {
                            Id = 25,
                            Cols = "Emp. No.,Name,Rank,Special Deduction",
                            Name = "Special Deductions ll"
                        },
                        new
                        {
                            Id = 26,
                            Cols = "Emp. No.,Name,Rank,Fine and Penalty",
                            Name = "Fine and Penalty Deductions"
                        },
                        new
                        {
                            Id = 27,
                            Cols = "Emp. No.,Name,Rank,Mobile Phone",
                            Name = "Mobile Phone Deductions"
                        },
                        new
                        {
                            Id = 28,
                            Cols = "",
                            Name = "Donation Recovery Deductions"
                        },
                        new
                        {
                            Id = 29,
                            Cols = "Emp. No.,Name,Rank,Festival Advance",
                            Name = "Festival Advance Deductions"
                        },
                        new
                        {
                            Id = 30,
                            Cols = "Emp. No.,Name,Rank,Amount",
                            Name = "Welfare Deductions"
                        },
                        new
                        {
                            Id = 31,
                            Cols = "",
                            Name = "Pay slip"
                        },
                        new
                        {
                            Id = 32,
                            Cols = "Emp No,Name,Rank,Gross Salary(Rs.),Deductions(Rs.),Net Salary(Rs.),Date,Signature",
                            Name = "Pay sheet"
                        },
                        new
                        {
                            Id = 33,
                            Cols = "",
                            Name = "Pay Summary"
                        },
                        new
                        {
                            Id = 34,
                            Cols = "Month,Pay Strength,Total Earnings,Total Deductions,Net Salary,Average",
                            Name = "Pay Analyzer"
                        },
                        new
                        {
                            Id = 35,
                            Cols = "No.,Emp No,Name,Location No,Location,EPF No,Signature",
                            Name = "EPF/ETF H-O List"
                        },
                        new
                        {
                            Id = 36,
                            Cols = "No.,Emp No,Name,Location No,Location,EPF No,Signature",
                            Name = "EPF/ETF Statement"
                        },
                        new
                        {
                            Id = 37,
                            Cols = "",
                            Name = "ETF 6 Month Return"
                        },
                        new
                        {
                            Id = 38,
                            Cols = "NIC Number,Surname,Initial,EPF No.,Tot. Con.,Emp. Con.,Mem. Con.,B. Sal.,Emp. No.,No. Of Days",
                            Name = "EPF E Return"
                        },
                        new
                        {
                            Id = 39,
                            Cols = "Emp No,Name,Rank,Premium,Paid Amount,Balance",
                            Name = "Insurance"
                        },
                        new
                        {
                            Id = 40,
                            Cols = "Emp No,Name,Rank,TotalAmount,Paid Amount,Balance",
                            Name = "Uniform"
                        },
                        new
                        {
                            Id = 41,
                            Cols = "Emp No,Name,Rank,Total Amount,Paid Amount,Balance",
                            Name = "Sport Uniforms"
                        },
                        new
                        {
                            Id = 42,
                            Cols = "Emp No,Name,Rank,TotalAmount,Paid Amount,Balance",
                            Name = "Fine And Penalty"
                        },
                        new
                        {
                            Id = 43,
                            Cols = "Emp No.,Name,Rank,Tot. Balance,Paid Amount,Balance",
                            Name = "Donations"
                        },
                        new
                        {
                            Id = 44,
                            Cols = "Emp No,Name,Rank,Full Amount,Paid Amount,Balance",
                            Name = "Festival Advance"
                        },
                        new
                        {
                            Id = 45,
                            Cols = "Emp. No.,Name,Rank,Available Balance",
                            Name = "Death Deductions"
                        },
                        new
                        {
                            Id = 46,
                            Cols = "Emp.No.,Name,Rank,Deduction,Amount,Balance",
                            Name = "Fixed Deductions"
                        },
                        new
                        {
                            Id = 47,
                            Cols = "Sector,Location No.,Location Name",
                            Name = "Locations Report"
                        });
                });

            modelBuilder.Entity("web_project.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SalaryTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("web_project.Models.SalaryAdvance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Advance")
                        .HasColumnType("double");

                    b.Property<string>("BrCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("SalaryAdvance");
                });

            modelBuilder.Entity("web_project.Models.SalaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAdd")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SalaryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdd = true,
                            Name = "Basic Salary"
                        },
                        new
                        {
                            Id = 2,
                            IsAdd = true,
                            Name = "Allowance"
                        },
                        new
                        {
                            Id = 3,
                            IsAdd = false,
                            Name = "Deduction"
                        },
                        new
                        {
                            Id = 4,
                            IsAdd = true,
                            Name = "Over Time"
                        },
                        new
                        {
                            Id = 5,
                            IsAdd = false,
                            Name = "Stamp"
                        },
                        new
                        {
                            Id = 6,
                            IsAdd = false,
                            Name = "Epf"
                        });
                });

            modelBuilder.Entity("web_project.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Sector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CENTRAL PROVINCE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LADY SECTION"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NORTH / NORTH CENTRAL / EASTERN PROVINCE "
                        },
                        new
                        {
                            Id = 4,
                            Name = "NORTH WESTERN PROVINCE"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SABARAGAMUWA & UVA PROVINCE"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SOUTHERN PROVINCE - HBT"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SOUTHERN PROVINCE - GALLE"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SOUTHERN PROVINCE - MATARA"
                        },
                        new
                        {
                            Id = 9,
                            Name = "WESTERN PROVINCE – I"
                        },
                        new
                        {
                            Id = 10,
                            Name = "WESTERN PROVINCE - II"
                        },
                        new
                        {
                            Id = 11,
                            Name = "WESTERN PROVINCE - III"
                        },
                        new
                        {
                            Id = 12,
                            Name = "WESTERN PROVINCE - IV"
                        },
                        new
                        {
                            Id = 13,
                            Name = "WESTERN PROVINCE - V"
                        },
                        new
                        {
                            Id = 14,
                            Name = "WESTERN PROVINCE - VI"
                        },
                        new
                        {
                            Id = 15,
                            Name = "WESTERN PROVINCE - VII"
                        });
                });

            modelBuilder.Entity("web_project.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ACNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmpNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Epf")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Initials")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NicNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffAttendanceDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("StaffAttendanceDetailsId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("web_project.Models.StaffAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EnterAttendanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EnterAttendanceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffAttendance");
                });

            modelBuilder.Entity("web_project.Models.StaffAttendanceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmpCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EnterAttendanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnterAttendanceId");

                    b.ToTable("StaffAttendanceDetails");
                });

            modelBuilder.Entity("web_project.Models.TempAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EnterAttendanceId")
                        .HasColumnType("int");

                    b.Property<bool>("FromHistory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EnterAttendanceId");

                    b.HasIndex("StaffId");

                    b.ToTable("TempAttendance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Allowance", b =>
                {
                    b.HasOne("web_project.Models.AllowanceType", "AllowanceType")
                        .WithMany()
                        .HasForeignKey("AllowanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.BasicSalary", b =>
                {
                    b.HasOne("web_project.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Deduction", b =>
                {
                    b.HasOne("web_project.Models.DeductionType", "DeductionType")
                        .WithMany()
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.DeductionHistory", b =>
                {
                    b.HasOne("web_project.Models.DeductionType", "DeductionType")
                        .WithMany()
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Donation", b =>
                {
                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.EmployeeClearance", b =>
                {
                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.EnterAttendance", b =>
                {
                    b.HasOne("web_project.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.FestivalAdvance", b =>
                {
                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Gratuity", b =>
                {
                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.InsuranceDetails", b =>
                {
                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Report", b =>
                {
                    b.HasOne("web_project.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Salary", b =>
                {
                    b.HasOne("web_project.Models.SalaryType", "SalaryType")
                        .WithMany()
                        .HasForeignKey("SalaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.SalaryAdvance", b =>
                {
                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.Staff", b =>
                {
                    b.HasOne("web_project.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.StaffAttendanceDetails", null)
                        .WithMany("Staff")
                        .HasForeignKey("StaffAttendanceDetailsId");
                });

            modelBuilder.Entity("web_project.Models.StaffAttendance", b =>
                {
                    b.HasOne("web_project.Models.EnterAttendance", "EnterAttendance")
                        .WithMany()
                        .HasForeignKey("EnterAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.StaffAttendanceDetails", b =>
                {
                    b.HasOne("web_project.Models.EnterAttendance", "EnterAttendance")
                        .WithMany()
                        .HasForeignKey("EnterAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_project.Models.TempAttendance", b =>
                {
                    b.HasOne("web_project.Models.EnterAttendance", "EnterAttendance")
                        .WithMany()
                        .HasForeignKey("EnterAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_project.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
